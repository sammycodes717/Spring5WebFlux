package com.learnings.app.routerhandlers;

import java.time.Duration;
import java.util.Date;
import java.util.stream.Stream;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.web.reactive.function.server.ServerRequest;
import org.springframework.web.reactive.function.server.ServerResponse;

import com.learnings.app.domain.Employee;
import com.learnings.app.domain.EmployeeEvent;
import com.learnings.app.repository.EmployeeRepository;

import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.util.function.Tuple2;

@Component
public class RouterHandlers {

	@Autowired
	private EmployeeRepository employeeRepository;

	public Mono<ServerResponse> getAll(ServerRequest serverRequest) {
		return ServerResponse.ok().body(employeeRepository.findAll(), Employee.class);
	}

	public Mono<ServerResponse> getId(ServerRequest serverRequest) {

		String empId = serverRequest.pathVariable("id");

		return ServerResponse.ok().body(employeeRepository.findById(empId), Employee.class);

	}
	
	public Mono<ServerResponse> getEvents(ServerRequest serverRequest) {

		String empId = serverRequest.pathVariable("id");

		return ServerResponse.ok().body(
				
				employeeRepository.findById(empId).flatMapMany(employee -> {
					Flux<Long> interval = Flux.interval(Duration.ofSeconds(2));

					Flux<EmployeeEvent> employeeEventFlux = Flux
							.fromStream(Stream.generate(() -> new EmployeeEvent(employee, new Date())));

					//1 or 2
					return Flux.zip(interval, employeeEventFlux).map(Tuple2::getT2);
					
					//2
//					 Flux.zip(interval, employeeEventFlux).map(objects->{
//						 return objects.getT2();
//					});
				});, Employee.class);

	}
}
